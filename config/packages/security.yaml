security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\VideoBasedMarketing\Account\Domain\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            entry_point: App\VideoBasedMarketing\Account\Infrastructure\Security\LoginBasedUserAuthenticator

            form_login:
                login_path: videobasedmarketing.account.presentation.sign_in
                check_path: videobasedmarketing.account.presentation.sign_in
                enable_csrf: true

            logout:
                path: videobasedmarketing.account.infrastructure.sign_out
                target: shared.presentation.contentpages.homepage

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 31536000
                samesite: 'none'
                secure: true
                always_remember_me: true
                token_provider:
                    doctrine: true

            # We intentionally do not use Symfony's Passwordless Login Link Authentication
            # (see https://symfony.com/doc/current/security/login_link.html) because it does not
            # support arbitrary target URLs.
            custom_authenticators:
                - App\VideoBasedMarketing\Account\Infrastructure\Security\RequestParametersBasedUserAuthenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: /admin/,          roles: ROLE_ADMIN }
        - { path: /administration/, roles: ROLE_ADMIN }
        - { path: /my/,             roles: ROLE_REGISTERED_USER }
        - { path: /mein-bereich/,   roles: ROLE_REGISTERED_USER }


when@dev:
    security:
        firewalls:
            main:
                remember_me:
                    secure: false

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
