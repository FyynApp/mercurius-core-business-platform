{# @var video \App\VideoBasedMarketing\Recordings\Domain\Entity\Video #}
{# @var videoPlayerSession \App\VideoBasedMarketing\Recordings\Domain\Entity\VideoPlayerSession #}

(function _fyyn_video_embed_{{ video.shortId }}() {

    const videoShortId = '{{ video.shortId }}';

    const waitForElement = (selector) => {
        return new Promise(resolve => {
            if (document.querySelector(selector)) {
                return resolve(document.querySelector(selector));
            }

            const observer = new MutationObserver(() => {
                if (document.querySelector(selector)) {
                    resolve(document.querySelector(selector));
                    observer.disconnect();
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    }

    {% if videoPlayerSession is not null %}

        let latestCurrentTime = 0;

        waitForElement(`.fyyn-video-${videoShortId}-player-embed-video`).then(($video) => {

            $video.addEventListener('timeupdate', () => {
                const currentTime = $video.currentTime;
                if (   currentTime - latestCurrentTime > 0.6
                    || currentTime < latestCurrentTime
                ) {
                    latestCurrentTime = currentTime;

                    const req = new XMLHttpRequest();
                    req.open(
                        'POST',
                        '{{ url(
                            'videobasedmarketing.recordings.track_video_player_session_event',
                            { videoPlayerSessionId: videoPlayerSession.id }
                        ) }}'
                        + '?playerCurrentTime=' + encodeURIComponent(currentTime)
                    );
                    req.send();
                }
            });
        });

    {% endif %}


    waitForElement(`.fyyn-video-${videoShortId}-player-embed-outer`).then(($outer) => {


        {# Video tag #}
        $outer.insertAdjacentHTML(
            'beforeend',

            `
            <video
                    style="width: 100%;"
                    class="fyyn-video-${videoShortId}-player-embed-video"
                    preload="metadata"
                    poster="{{ TwigHelperService.recordingsInfrastructureService.videoPosterStillAssetUrl(video) }}"
            >
                <source
                        src="{{ TwigHelperService.recordingsInfrastructureService.videoFullAssetUrl(video) }}"
                        type="{{ TwigHelperService.recordingsInfrastructureService.videoFullAssetMimeType(video).value }}"
                >
                {% for vtt in TwigHelperService.audioTranscriptionDomainService.webVtts(video) %}
                    {# @var vtt \App\VideoBasedMarketing\AudioTranscription\Domain\Entity\AudioTranscriptionWebVtt #}
                    <track
                            {% if loop.first %}default{% endif %}

                            src="{{ url(
                'videobasedmarketing.audio_transcription.infrastructure.web_vtt',
                { webVttId: vtt.id }
            ) }}"

                            label="{{ vtt.audioTranscriptionBcp47LanguageCode.value }}"

                            kind="subtitles"
                    >
                {% endfor %}
            </video>
            `
        );


        {# Blur overlay #}
        $outer.insertAdjacentHTML(
            'beforeend',

            `
            <div
                id="fyyn-video-${videoShortId}-player-embed-central-play-button-wrapper"

                style="
                    width: 100%;
                    height: 100%;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                    position: absolute;
                    top: 0;
                    left: 0;
                    backdrop-filter: blur(4px);
                    border-radius: 0.375rem;
                    "
            >
                <div
                    id="fyyn-video-${videoShortId}-player-embed-central-play-button"

                    class="
                        fyyn-video-${videoShortId}-player-embed-gradient
                        fyyn-video-${videoShortId}-player-embed-rounded-full
                        fyyn-video-${videoShortId}-player-embed-opacity-90
                        fyyn-video-${videoShortId}-player-embed-hover-opacity-100
                        fyyn-video-${videoShortId}-player-embed-cursor-pointer
                        "

                    style="
                        width: 100px;
                        height: 100px;
                        color: white;
                        border: 1px solid white;
                        display: flex;
                        flex-direction: row;
                        justify-content: center;
                        align-items: center;
                        "
                >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="" style="padding-left: 8px; width: 70%; opacity: 80%;">
                        <path fill-rule="evenodd" d="M4.5 5.653c0-1.426 1.529-2.33 2.779-1.643l11.54 6.348c1.295.712 1.295 2.573 0 3.285L7.28 19.991c-1.25.687-2.779-.217-2.779-1.643V5.653z" clip-rule="evenodd" />
                    </svg>
                </div>
            </div>
        `
        );


        const $video = document.querySelector(`.fyyn-video-${videoShortId}-player-embed-video`);


        {# Play button #}
        waitForElement(`#fyyn-video-${videoShortId}-player-embed-central-play-button-wrapper`)
            .then(($centralPlayButtonWrapper) => {
                const togglePlay = () => {
                    if ($video.paused || $video.ended) {
                        $video.play();
                        $video.setAttribute('controls', '');
                        $centralPlayButtonWrapper.remove();
                    } else {
                        $video.pause();
                    }
                }

                $centralPlayButtonWrapper.addEventListener('click', togglePlay);


                {% if TwigHelperService.embeddableVideoPlayerPresentationService.embedMustBeBranded(video) %}
                    $centralPlayButtonWrapper.insertAdjacentHTML(
                        'beforeend',
                        `
                        <div
                            style="
                                color: white;
                                font-family: Arial, Verdana, sans-serif;
                                font-size: 8pt;
                                padding-top: 6px;
                                padding-bottom: 6px;
                                padding-left: 12px;
                                padding-right: 12px;
                                margin-top: 6px;
                                background-color: #00354c;
                                border-radius: 0.375rem;
                                "
                        >
                            powered by Fyyn.io
                        </div>
                        `
                    );
                {% endif %}
            });

    });

})();
